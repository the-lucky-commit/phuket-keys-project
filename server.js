import express from 'express';
import 'dotenv/config';
import cors from 'cors';
import pg from 'pg';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import { v2 as cloudinary } from 'cloudinary';
import sgMail from '@sendgrid/mail';

const REQUIRED_ENV_VARS = [
  'DATABASE_URL',
  'FRONTEND_URL',
  'JWT_SECRET',
  'CLOUD_NAME',
  'API_KEY',
  'API_SECRET',
  'SENDGRID_API_KEY',
  'SENDGRID_SENDER_EMAIL'
];

const missingVars = REQUIRED_ENV_VARS.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('====================================================');
  console.error('FATAL ERROR: Missing required environment variables:');
  console.error(missingVars.join('\n'));
  console.error('====================================================');
  process.exit(1); // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
}

const { Pool } = pg;
const app = express();
const port = process.env.PORT || 10000;

if (!process.env.FRONTEND_URL) {
  console.error("FATAL ERROR: FRONTEND_URL is not defined in environment variables.");
  process.exit(1); // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
}

// Middlewares & Configs
app.use(express.json());

console.log("===================================");
console.log("Reading FRONTEND_URL as:", process.env.FRONTEND_URL);

const corsOptions = {
  origin: [
    'http://localhost:3000',
    process.env.FRONTEND_URL
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.API_KEY,
  api_secret: process.env.API_SECRET,
});

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// =================================================================
// --- AUTHENTICATION & AUTHORIZATION ---
// =================================================================

// [ üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ üîÑ ]
app.post('/api/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        // --- ‚¨áÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL Query] ‚¨áÔ∏è ---
        // ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç AND role = 'admin'
        const { rows } = await pool.query('SELECT * FROM users WHERE username = $1 AND role = $2', [username, 'admin']);
        // --- ‚¨ÜÔ∏è [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚¨ÜÔ∏è ---

        if (rows.length === 0) {
            return res.status(401).json({ error: 'Invalid username or password' });
        }
        const user = rows[0];
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: 'Invalid username or password' });
        }
        // ‚≠êÔ∏è ‡∏™‡πà‡∏á role ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ Frontend Admin ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ)
        const accessToken = jwt.sign({ username: user.username, id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1d' });
        res.json({ accessToken });
    } catch (error) {
        console.error('Admin Login error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// --- ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ] ‚¨áÔ∏è ---
app.post('/api/register', async (req, res) => {
    try {
        const { username, password, email } = req.body; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö email ‡∏î‡πâ‡∏ß‡∏¢

        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input
        if (!username || !password || !email) {
            return res.status(400).json({ error: 'Username, password, and email are required' });
        }

        // 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Username ‡∏´‡∏£‡∏∑‡∏≠ Email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const { rows: existingUsers } = await pool.query(
            'SELECT * FROM users WHERE username = $1 OR email = $2',
            [username, email]
        );
        if (existingUsers.length > 0) {
            return res.status(409).json({ error: 'Username or email already exists' });
        }

        // 3. Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB (role ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'customer' ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å DEFAULT)
        const { rows: newUsers } = await pool.query(
            'INSERT INTO users (username, password, email) VALUES ($1, $2, $3) RETURNING id, username, role',
            [username, hashedPassword, email]
        );

        const newUser = newUsers[0];

        // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ Login ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const accessToken = jwt.sign(
            { username: newUser.username, id: newUser.id, role: newUser.role }, 
            process.env.JWT_SECRET, 
            { expiresIn: '1d' }
        );

        res.status(201).json({ accessToken }); // ‚≠êÔ∏è ‡∏™‡πà‡∏á Token ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ

    } catch (error) {
        console.error('Customer Register error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// --- ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ] ‚¨áÔ∏è ---
app.post('/api/customer-login', async (req, res) => {
    try {
        const { username, password } = req.body; // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ email login ‡∏Å‡πá‡πÑ‡∏î‡πâ

        // ‚≠êÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ Role 'customer'
        const { rows } = await pool.query('SELECT * FROM users WHERE username = $1 AND role = $2', [username, 'customer']);

        if (rows.length === 0) {
            return res.status(401).json({ error: 'Invalid credentials or not a customer account' });
        }
        const user = rows[0];
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }

        // ‚≠êÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Token (‡∏°‡∏µ role: 'customer')
        const accessToken = jwt.sign({ username: user.username, id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1d' });
        res.json({ accessToken });
    } catch (error) {
        console.error('Customer Login error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

const verifyToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) {
        return res.status(401).json({ error: 'Access token is missing or invalid' });
    }
    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: 'Token is not valid' });
        }
        req.user = user;
        next();
    });
};

// =================================================================
// --- PROTECTED ADMIN API ENDPOINTS ---
// =================================================================
const adminRouter = express.Router();
adminRouter.use(verifyToken);

const customerRouter = express.Router();
customerRouter.use(verifyToken);

// [ ‚¨áÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ ‚¨áÔ∏è ]
// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Amenities ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Admin
adminRouter.get('/amenities', async (req, res) => {
    try {
        const { rows } = await pool.query('SELECT * FROM amenities ORDER BY name ASC');
        res.json(rows);
    } catch (error) {
        console.error('Error fetching amenities:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// --- ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° API 3 ‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏µ‡πâ] ‚¨áÔ∏è ---

// 1. GET: ‡∏î‡∏∂‡∏á "ID" ‡∏Ç‡∏≠‡∏á Property ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà User ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏à
// (Frontend ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏î‡∏ß‡∏á‡πÑ‡∏´‡∏ô '‡πÄ‡∏ï‡πá‡∏°')
customerRouter.get('/favorites', async (req, res) => {
    try {
        const userId = req.user.id; // ‚≠êÔ∏è ‡πÑ‡∏î‡πâ ID User ‡∏à‡∏≤‡∏Å Token
        const { rows } = await pool.query(
            'SELECT property_id FROM user_favorites WHERE user_id = $1',
            [userId]
        );
        // ‚≠êÔ∏è ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á ID (‡πÄ‡∏ä‡πà‡∏ô [15, 22, 30])
        const favoriteIds = rows.map(row => row.property_id);
        res.json(favoriteIds);
    } catch (error) {
        console.error('Error fetching favorites:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// 2. POST: ‡∏Å‡∏î "‡∏ñ‡∏π‡∏Å‡πÉ‡∏à" (‡πÄ‡∏û‡∏¥‡πà‡∏° Property ‡∏•‡∏á‡πÉ‡∏ô Favorites)
customerRouter.post('/favorites', async (req, res) => {
    try {
        const userId = req.user.id;
        const { propertyId } = req.body; // ‚≠êÔ∏è ‡∏£‡∏±‡∏ö ID Property ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏à

        if (!propertyId) {
            return res.status(400).json({ error: 'Property ID is required' });
        }

        // ‚≠êÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° (‡∏ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥ DB ‡∏à‡∏∞ error ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏±‡∏Å‡πÑ‡∏ß‡πâ)
        await pool.query(
            'INSERT INTO user_favorites (user_id, property_id) VALUES ($1, $2)',
            [userId, propertyId]
        );
        res.status(201).json({ message: 'Favorite added' });

    } catch (error) {
        if (error.code === '23505') { // 23505 = Unique constraint violation
            return res.status(409).json({ error: 'Already favorited' });
        }
        console.error('Error adding favorite:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// 3. DELETE: ‡∏Å‡∏î "‡πÄ‡∏•‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏à" (‡∏•‡∏ö Property ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Favorites)
customerRouter.delete('/favorites/:propertyId', async (req, res) => {
    try {
        const userId = req.user.id;
        const { propertyId } = req.params; // ‚≠êÔ∏è ‡∏£‡∏±‡∏ö ID Property ‡∏à‡∏≤‡∏Å URL

        const { rowCount } = await pool.query(
            'DELETE FROM user_favorites WHERE user_id = $1 AND property_id = $2',
            [userId, propertyId]
        );

        if (rowCount === 0) {
            return res.status(404).json({ error: 'Favorite not found' });
        }
        res.json({ message: 'Favorite removed' });

    } catch (error) {
        console.error('Error removing favorite:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

// --- ‚¨ÜÔ∏è [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°] ‚¨ÜÔ∏è ---

// [ üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ üîÑ ]
adminRouter.get('/stats', async (req, res) => {
    try {
        // ‚≠êÔ∏è 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï SQL query
        const statsQuery = `
            SELECT
                COUNT(*) AS total_properties,
                SUM(CASE WHEN status = 'For Sale' THEN 1 ELSE 0 END) AS for_sale,
                SUM(CASE WHEN status = 'For Rent' THEN 1 ELSE 0 END) AS for_rent,

                -- ‚≠êÔ∏è 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö 'availability' (‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                SUM(CASE WHEN availability = 'Available' THEN 1 ELSE 0 END) AS available,
                SUM(CASE WHEN availability = 'Reserved' THEN 1 ELSE 0 END) AS reserved,

                -- ‚≠êÔ∏è 3. (Bonus) ‡∏ô‡∏±‡∏ö "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
                SUM(CASE WHEN status = 'For Rent (Daily)' THEN 1 ELSE 0 END) AS for_rent_daily
            FROM properties;
        `;
        const { rows } = await pool.query(statsQuery);
        res.json(rows[0]);
    } catch (error) {
        console.error('Error fetching dashboard stats:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

adminRouter.get('/properties', async (req, res) => {
    try {
        const { keyword, status } = req.query;

        let baseQuery = 'SELECT id, main_image_url, title, status, price, created_at FROM properties';
        const conditions = [];
        const values = [];
        let counter = 1;

        if (keyword) {
            conditions.push(`LOWER(title) LIKE $${counter++}`);
            values.push(`%${keyword.toLowerCase()}%`);
        }

        if (status && (status === 'For Sale' || status === 'For Rent')) {
            conditions.push(`status = $${counter++}`);
            values.push(status);
        }

        if (conditions.length > 0) {
            baseQuery += ' WHERE ' + conditions.join(' AND ');
        }
        
        baseQuery += ' ORDER BY created_at DESC';

        const { rows } = await pool.query(baseQuery, values);
        res.json(rows);

    } catch (error) {
        console.error('Error fetching admin properties list:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô server.js
adminRouter.get('/properties-by-type', async (req, res) => {
    try {
        const query = `
            SELECT
                type,
                COUNT(*) AS count
            FROM properties
            GROUP BY type
            ORDER BY count DESC;
        `;
        const { rows } = await pool.query(query);
        res.json(rows);
    } catch (error) {
        console.error('Error fetching properties by type:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// [ üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ üîÑ ]
adminRouter.get('/properties/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const propertyRes = await pool.query('SELECT * FROM properties WHERE id = $1', [id]);
        if (propertyRes.rows.length === 0) return res.status(404).json({ message: 'Property not found' });
        
        const imagesRes = await pool.query('SELECT id, image_url FROM property_images WHERE property_id = $1 ORDER BY created_at ASC', [id]);
        
        // --- [ ‚¨áÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‚¨áÔ∏è ] ---
        // ‡∏î‡∏∂‡∏á Amenities ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Property ‡∏ô‡∏µ‡πâ
        const amenitiesQuery = `
            SELECT a.id, a.name, a.icon 
            FROM amenities a
            JOIN property_amenities pa ON a.id = pa.amenity_id
            WHERE pa.property_id = $1
            ORDER BY a.name;
        `;
        const amenitiesRes = await pool.query(amenitiesQuery, [id]);
        // --- [ ‚¨ÜÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‚¨ÜÔ∏è ] ---

        const property = propertyRes.rows[0];
        property.images = imagesRes.rows;
        property.amenities = amenitiesRes.rows; // ‚≠êÔ∏è ‡∏ú‡∏π‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Amenities ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢

        res.json(property);
    } catch (error) {
        console.error('Error fetching single property:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// [ üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ üîÑ ]
// POST (Create new property)
adminRouter.post('/properties', async (req, res) => {
    // ‚≠êÔ∏è 1. ‡πÉ‡∏ä‡πâ client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transaction
    const client = await pool.connect();
    try {
        await client.query('BEGIN'); // ‚≠êÔ∏è 2. ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction
        await client.query('BEGIN'); 

    // 1. ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° 'availability'] ‚¨áÔ∏è
    const { title, status, price, main_image_url, main_image_public_id, price_period, bedrooms, bathrooms, area_sqm, description, amenities, availability } = req.body;

    // 2. ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° 'availability' (‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 11) ‡πÅ‡∏•‡∏∞ $11] ‚¨áÔ∏è
    const sql = `INSERT INTO properties (title, status, price, main_image_url, main_image_public_id, price_period, bedrooms, bathrooms, area_sqm, description, availability) 
                 VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id`;

    // 3. ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° 'availability' (‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 11)] ‚¨áÔ∏è
    const values = [title, status, price, main_image_url, main_image_public_id, price_period, bedrooms, bathrooms, area_sqm, description, availability || 'Available']; // ‚≠êÔ∏è (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'Available')

    const { rows } = await client.query(sql, values);
        const newPropertyId = rows[0].id; // ‚≠êÔ∏è 5. ‡πÄ‡∏≠‡∏≤ ID ‡∏Ç‡∏≠‡∏á Property ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á

        // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'property_amenities' (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (amenities && Array.isArray(amenities) && amenities.length > 0) {
            const amenitiesPromises = amenities.map(amenityId => {
                return client.query(
                    'INSERT INTO property_amenities (property_id, amenity_id) VALUES ($1, $2)',
                    [newPropertyId, amenityId]
                );
            });
            await Promise.all(amenitiesPromises); // ‚≠êÔ∏è 7. ‡∏£‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        }

        await client.query('COMMIT'); // ‚≠êÔ∏è 8. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
        res.status(201).json({ message: 'Property created successfully', id: newPropertyId });

    } catch (error) {
        await client.query('ROLLBACK'); // ‚≠êÔ∏è 9. ‡∏ñ‡πâ‡∏≤‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        console.error('Error creating property:', error);
        res.status(500).json({ error: 'Database query failed' });
    } finally {
        client.release(); // ‚≠êÔ∏è 10. ‡∏Ñ‡∏∑‡∏ô Connection
    }
});

// [ üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ üîÑ ]
// PUT (Update property by id)
adminRouter.put('/properties/:id', async (req, res) => {
    // ‚≠êÔ∏è 1. ‡πÉ‡∏ä‡πâ client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transaction
    const client = await pool.connect();
    try {
    await client.query('BEGIN'); 
    const { id } = req.params;

    // 1. ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° 'availability'] ‚¨áÔ∏è
    const { 
        title, status, price, main_image_url, main_image_public_id, 
        price_period, bedrooms, bathrooms, area_sqm, description,
        old_main_image_public_id,
        amenities,
        availability // ‚≠êÔ∏è ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ
    } = req.body;

    // 2. ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° 'availability = $11'] ‚¨áÔ∏è
    const sql = `UPDATE properties SET 
                    title = $1, status = $2, price = $3, main_image_url = $4, main_image_public_id = $5, 
                    price_period = $6, bedrooms = $7, bathrooms = $8, area_sqm = $9, description = $10,
                    availability = $11 
                 WHERE id = $12`; // ‚≠êÔ∏è (‡πÅ‡∏Å‡πâ WHERE ‡πÄ‡∏õ‡πá‡∏ô $12)

    // 3. ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° 'availability' (‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 11) ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ id ‡πÄ‡∏õ‡πá‡∏ô $12] ‚¨áÔ∏è
    const values = [
        title, status, price, main_image_url, main_image_public_id, 
        price_period, bedrooms, bathrooms, area_sqm, description, 
        availability || 'Available', // ‚≠êÔ∏è (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'Available')
        id
    ];

    const { rowCount } = await client.query(sql, values);
        if (rowCount === 0) {
            await client.query('ROLLBACK');
            return res.status(404).json({ message: 'Property not found' });
        }

        // 5. ‚≠êÔ∏è (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç) ‡∏•‡∏ö Amenities "‡πÄ‡∏Å‡πà‡∏≤" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Property ‡∏ô‡∏µ‡πâ
        await client.query('DELETE FROM property_amenities WHERE property_id = $1', [id]);

        // 6. ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° Amenities "‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (amenities && Array.isArray(amenities) && amenities.length > 0) {
            const amenitiesPromises = amenities.map(amenityId => {
                return client.query(
                    'INSERT INTO property_amenities (property_id, amenity_id) VALUES ($1, $2)',
                    [id, amenityId]
                );
            });
            await Promise.all(amenitiesPromises);
        }

        // 7. (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Cloudinary (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (old_main_image_public_id) {
            try {
                await cloudinary.uploader.destroy(old_main_image_public_id);
            } catch (cldError) {
                console.warn('Cloudinary destroy error:', cldError.message);
            }
        }

        await client.query('COMMIT'); // ‚≠êÔ∏è 8. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction
        res.json({ message: 'Property updated successfully' });

    } catch (error) {
        await client.query('ROLLBACK'); // ‚≠êÔ∏è 9. ‡∏ñ‡πâ‡∏≤‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        console.error('Error updating property:', error);
        res.status(500).json({ error: 'Database query failed' });
    } finally {
        client.release(); // ‚≠êÔ∏è 10. ‡∏Ñ‡∏∑‡∏ô Connection
    }
});

adminRouter.delete('/properties/:id', async (req, res) => {
    // --- ‚¨áÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ Transaction ---
    const client = await pool.connect(); // ‡∏¢‡∏∑‡∏° connection ‡∏°‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Transaction
    try {
        const { id } = req.params;

        await client.query('BEGIN'); // ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction

        // 1. ‡∏î‡∏∂‡∏á Public ID ‡∏Ç‡∏≠‡∏á Gallery ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö property ‡∏ô‡∏µ‡πâ
        const galleryImagesRes = await client.query('SELECT public_id FROM property_images WHERE property_id = $1', [id]);
        const galleryPublicIds = galleryImagesRes.rows
            .map(img => img.public_id)
            .filter(Boolean); // .filter(Boolean) ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ null ‡∏´‡∏£‡∏∑‡∏≠ "" ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ

        // 2. ‡∏î‡∏∂‡∏á Public ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
        const propertyRes = await client.query('SELECT main_image_public_id FROM properties WHERE id = $1', [id]);

        if (propertyRes.rows.length === 0) {
            await client.query('ROLLBACK'); // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö Transaction
            return res.status(404).json({ message: 'Property not found' });
        }

        const mainPublicId = propertyRes.rows[0].main_image_public_id;

        // 3. ‡∏•‡∏ö Gallery Images ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Cloudinary
        if (galleryPublicIds.length > 0) {
            // .api.delete_resources() ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤)
            await cloudinary.api.delete_resources(galleryPublicIds);
        }

        // 4. ‡∏•‡∏ö Main Image ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Cloudinary
        if (mainPublicId) {
            await cloudinary.uploader.destroy(mainPublicId);
        }

        // 5. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Database
        // **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        // ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Foreign Key ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á `property_images` (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå `property_id`)
        // ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "ON DELETE CASCADE"
        // (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô DELETE FROM property_images... ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ)

        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á Cascade ‡πÑ‡∏ß‡πâ:
        await client.query('DELETE FROM properties WHERE id = $1', [id]);

        await client.query('COMMIT'); // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction (‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
        // --- ‚¨ÜÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

        res.json({ message: 'Property and all associated images deleted successfully' });

    } catch (error) {
        await client.query('ROLLBACK'); // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        console.error('Error deleting property:', error);
        res.status(500).json({ error: 'Database query failed' });
    } finally {
        client.release(); // ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ pool
    }
});

// --- ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ] ‚¨áÔ∏è ---
// POST: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transaction (‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢/‡πÄ‡∏ä‡πà‡∏≤)
adminRouter.post('/properties/:id/close-deal', async (req, res) => {
    // ‚≠êÔ∏è 1. ‡πÉ‡∏ä‡πâ Transaction
    const client = await pool.connect();
    try {
        await client.query('BEGIN'); // ‚≠êÔ∏è 2. ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction
        const { id } = req.params; // ID ‡∏Ç‡∏≠‡∏á Property

        // 3. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Admin
        const { transaction_type, final_price, user_id } = req.body; 

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input
        if (!transaction_type || !final_price || (transaction_type !== 'Sold' && transaction_type !== 'Rented')) {
            await client.query('ROLLBACK');
            return res.status(400).json({ error: 'Invalid transaction type or final price' });
        }

        // 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'transactions'
        const transactionSql = `
            INSERT INTO transactions (property_id, user_id, transaction_type, final_price)
            VALUES ($1, $2, $3, $4)
        `;
        // (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user_id ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null)
        await client.query(transactionSql, [id, user_id || null, transaction_type, final_price]);

        // 6. ‚≠êÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'availability' ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'properties'
        //    (‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß -> Sold, ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß -> Rented)
        const newAvailability = (transaction_type === 'Sold') ? 'Sold' : 'Rented';
        const updatePropertySql = `
            UPDATE properties SET availability = $1 WHERE id = $2
        `;
        await client.query(updatePropertySql, [newAvailability, id]);

        await client.query('COMMIT'); // ‚≠êÔ∏è 7. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction
        res.status(201).json({ message: 'Transaction recorded and property status updated' });

    } catch (error) {
        await client.query('ROLLBACK'); // ‚≠êÔ∏è 8. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ñ‡πâ‡∏≤‡∏û‡∏•‡∏≤‡∏î
        console.error('Error closing deal:', error);
        res.status(500).json({ error: 'Database query failed' });
    } finally {
        client.release(); // ‚≠êÔ∏è 9. ‡∏Ñ‡∏∑‡∏ô Connection
    }
});
// --- ‚¨ÜÔ∏è [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°] ‚¨ÜÔ∏è ---

adminRouter.post('/properties/:id/images', upload.array('images', 5), async (req, res) => {
    try {
        const { id } = req.params;
        const files = req.files;
        if (!files || files.length === 0) {
            return res.status(400).json({ error: 'No files uploaded.' });
        }

        const uploadPromises = files.map(file => {
            const b64 = Buffer.from(file.buffer).toString('base64');
            let dataURI = "data:" + file.mimetype + ";base64," + b64;
            return cloudinary.uploader.upload(dataURI, { folder: "phuket-keys-gallery" });
        });

        const results = await Promise.all(uploadPromises);

        // --- ‚¨áÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ map 'results' ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ---
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ imageUrls.map ‡πÅ‡∏•‡πâ‡∏ß
        const insertPromises = results.map(result => {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° public_id ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á INSERT
            return pool.query(
                'INSERT INTO property_images (property_id, image_url, public_id) VALUES ($1, $2, $3)', 
                [id, result.secure_url, result.public_id] // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° result.public_id
            );
        });
        // --- ‚¨ÜÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

        await Promise.all(insertPromises);

        res.status(201).json({ message: 'Images uploaded successfully' });
    } catch (error) {
        console.error('Gallery image upload error:', error);
        res.status(500).json({ error: 'Image upload failed.' });
    }
}); 

adminRouter.delete('/images/:imageId', async (req, res) => {
    try {
        const { imageId } = req.params;

        // --- ‚¨áÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cloudinary ---

        // 1. ‡∏î‡∏∂‡∏á public_id ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB ‡∏Å‡πà‡∏≠‡∏ô
        const { rows } = await pool.query('SELECT public_id FROM property_images WHERE id = $1', [imageId]);

        if (rows.length === 0) {
            return res.status(404).json({ message: 'Image not found in database' });
        }

        const publicId = rows[0].public_id;

        // 2. ‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cloudinary (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ publicId)
        if (publicId) {
            try {
                // ‡πÉ‡∏ä‡πâ .destroy() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                await cloudinary.uploader.destroy(publicId);
            } catch (cldError) {
                // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÉ‡∏ô Cloudinary ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ñ‡∏¢‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
                // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ log error ‡πÑ‡∏ß‡πâ ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ (‡∏•‡∏ö‡πÉ‡∏ô DB)
                console.warn('Cloudinary destroy error (image may already be deleted):', cldError.message);
            }
        }

        // 3. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å DB (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        await pool.query('DELETE FROM property_images WHERE id = $1', [imageId]);
        // --- ‚¨ÜÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

        res.json({ message: 'Image deleted successfully' });
    } catch (error) {
        console.error('Error deleting image:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

app.use('/api/admin', adminRouter);

app.use('/api/customer', customerRouter);

// --- Image Upload Endpoint (for main image) ---
app.post('/api/upload', verifyToken, upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded.' });
    }
    const b64 = Buffer.from(req.file.buffer).toString('base64');
    let dataURI = "data:" + req.file.mimetype + ";base64," + b64;
    const result = await cloudinary.uploader.upload(dataURI, {
      folder: "phuket-keys"
    });

    // --- ‚¨áÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö 2 ‡∏Ñ‡πà‡∏≤ ---
    res.status(200).json({ 
      imageUrl: result.secure_url, 
      publicId: result.public_id   // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    });
    // --- ‚¨ÜÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

  } catch (error) {
    console.error('Image upload error:', error);
    res.status(500).json({ error: 'Image upload failed.' });
  }
});

// =================================================================
// --- PUBLIC API ENDPOINTS ---
// =================================================================

// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå server.js, ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà app.get('/api/properties', ...) ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ

app.get('/api/properties', async (req, res) => {
    try {
        const page = parseInt(req.query.page || '1');
        const limit = parseInt(req.query.limit || '9');
        const offset = (page - 1) * limit;

        // --- 1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Filter ‡πÉ‡∏´‡∏°‡πà ---
        const { status, keyword, type, minPrice, maxPrice } = req.query;

        let baseQuery = 'FROM properties';
        const conditions = [];
        const values = [];
        let counter = 1;

        // --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á WHERE clause (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç type, minPrice, maxPrice) ---
        if (status && status !== '') {
            conditions.push(`status = $${counter++}`);
            values.push(status);
        }
        if (keyword && typeof keyword === 'string' && keyword.trim() !== '') {
            const searchTerm = `%${keyword.toLowerCase()}%`;
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á title ‡πÅ‡∏•‡∏∞ description (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            conditions.push(`(LOWER(title) LIKE $${counter} OR LOWER(description) LIKE $${counter})`);
            values.push(searchTerm);
            counter++; // ‡πÄ‡∏û‡∏¥‡πà‡∏° counter ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ parameter index ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
        }
        if (type && typeof type === 'string' && type.trim() !== '' && type !== 'All') { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç type
            conditions.push(`type = $${counter++}`);
            values.push(type);
        }
        if (minPrice && !isNaN(parseFloat(minPrice))) { // ‡∏•‡∏ö as string ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        conditions.push(`price >= $${counter++}`);
        values.push(parseFloat(minPrice)); // ‡∏•‡∏ö as string ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}
        if (maxPrice && !isNaN(parseFloat(maxPrice))) { // ‡∏•‡∏ö as string ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        conditions.push(`price <= $${counter++}`);
        values.push(parseFloat(maxPrice)); // ‡∏•‡∏ö as string ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}

        if (conditions.length > 0) {
            baseQuery += ' WHERE ' + conditions.join(' AND ');
        }

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡∏ô‡∏±‡∏ö Total, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏™‡πà‡∏á Response) ---
        const totalResult = await pool.query(`SELECT COUNT(*) ${baseQuery}`, values);
        const totalProperties = parseInt(totalResult.rows[0].count);
        const totalPages = Math.ceil(totalProperties / limit);

        const dataQuery = `SELECT * ${baseQuery} ORDER BY created_at DESC LIMIT $${counter++} OFFSET $${counter++}`;
        const dataValues = [...values, limit, offset];
        const { rows } = await pool.query(dataQuery, dataValues);

        res.json({
            properties: rows,
            currentPage: page,
            totalPages: totalPages
        });

    } catch (error) {
        console.error('Error fetching public properties:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

app.get('/api/properties/featured', async (req, res) => {
    try {
        const limit = 4; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á (‡πÄ‡∏ä‡πà‡∏ô 4)
        const query = `
            SELECT * FROM properties 
            ORDER BY created_at DESC 
            LIMIT $1
        `;
        const { rows } = await pool.query(query, [limit]);
        res.json(rows); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á properties ‡πÄ‡∏•‡∏¢
    } catch (error) {
        console.error('Error fetching featured properties:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// [ üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ üîÑ ]
app.get('/api/properties/:id', async (req, res) => {
    try {
        const { id } = req.params;
        pool.query('UPDATE properties SET view_count = view_count + 1 WHERE id = $1', [id]);
        const propertyRes = await pool.query('SELECT * FROM properties WHERE id = $1', [id]);
        if (propertyRes.rows.length === 0) return res.status(404).json({ message: 'Property not found' });

        const imagesRes = await pool.query('SELECT id, image_url FROM property_images WHERE property_id = $1 ORDER BY created_at ASC', [id]);
        
        // --- [ ‚¨áÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‚¨áÔ∏è ] ---
        // ‡∏î‡∏∂‡∏á Amenities ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Property ‡∏ô‡∏µ‡πâ
        const amenitiesQuery = `
            SELECT a.id, a.name, a.icon 
            FROM amenities a
            JOIN property_amenities pa ON a.id = pa.amenity_id
            WHERE pa.property_id = $1
            ORDER BY a.name;
        `;
        const amenitiesRes = await pool.query(amenitiesQuery, [id]);
        // --- [ ‚¨ÜÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‚¨ÜÔ∏è ] ---
        
        const property = propertyRes.rows[0];
        property.images = imagesRes.rows;
        property.amenities = amenitiesRes.rows; // ‚≠êÔ∏è ‡∏ú‡∏π‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Amenities ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢

        res.json(property);
    } catch(error){
        console.error('Error fetching public single property:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

app.post('/api/contact', async (req, res) => {
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    try {
        const { name, email, phone, message } = req.body;
        if (!name || !email || !message) {
            return res.status(400).json({ error: 'Name, email, and message are required.' });
        }
        const msg = {
            to: process.env.SENDGRID_SENDER_EMAIL,
            from: process.env.SENDGRID_SENDER_EMAIL,
            subject: `New Message from ${name} via Website`,
            html: `<p>Name: ${name}</p><p>Email: ${email}</p><p>Phone: ${phone || 'N/A'}</p><p>Message: ${message}</p>`,
        };
        await sgMail.send(msg);
        res.status(200).json({ success: true, message: 'Message sent successfully!' });
    } catch (error) {
        console.error('SendGrid Error:', error.response?.body);
        res.status(500).json({ error: 'Failed to send message.' });
    }
});

// --- ‚¨áÔ∏è [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ] ‚¨áÔ∏è ---
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Public)
app.post('/api/log-search', async (req, res) => {
  try {
    const { status, type, minPrice, maxPrice, keyword } = req.body;

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (empty string) ‡∏´‡∏£‡∏∑‡∏≠ undefined ‡πÄ‡∏õ‡πá‡∏ô null
    const statusToLog = status || null;
    const typeToLog = type || null;
    const minPriceToLog = minPrice || null;
    const maxPriceToLog = maxPrice || null;
    const keywordToLog = keyword || null;

    const sql = `INSERT INTO search_logs (status, type, min_price, max_price, keyword)
                 VALUES ($1, $2, $3, $4, $5)`;

    await pool.query(sql, [statusToLog, typeToLog, minPriceToLog, maxPriceToLog, keywordToLog]);

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (fire-and-forget)
    res.status(200).json({ success: true });

  } catch (error) {
    console.error('Error logging search:', error);
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£ log ‡∏û‡∏±‡∏á ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á User
    res.status(500).json({ success: false }); 
  }
});
// --- ‚¨ÜÔ∏è [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°] ‚¨ÜÔ∏è ---

// =================================================================
// --- SERVER START ---
// =================================================================
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});